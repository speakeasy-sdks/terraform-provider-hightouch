// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// ModelCustom - Custom query for sources that doesn't support sql. For example, Airtable.
type ModelCustom struct {
	Query interface{} `json:"query"`
}

// ModelDbt - Query that is based on a dbt model
type ModelDbt struct {
	// Compiled SQL in the dbt model
	CompiledSQL string `json:"compiledSql"`
	// Name of the database containing the generated table
	Database string `json:"database"`
	// Unique ID of the model assigned by dbt (usually some combination of the schema and table name)
	DbtUniqueID string `json:"dbtUniqueId"`
	// Model id that refer to a dbt model
	ModelID string `json:"modelId"`
	// Name of the table generated by the dbt model
	Name string `json:"name"`
	// Raw SQL in the dbt model
	RawSQL string `json:"rawSql"`
	// Name of the schema containing the generated table
	Schema string `json:"schema"`
}

// ModelRaw - Standard raw SQL query
type ModelRaw struct {
	SQL string `json:"sql"`
}

// ModelTable - Table-based query that fetches on a table instead of SQL
type ModelTable struct {
	Name string `json:"name"`
}

// ModelVisual - Visual query, used by audience
type ModelVisual struct {
	Filter interface{} `json:"filter"`
	// Parent id of the schema that visual query is based on
	ParentID       string `json:"parentId"`
	PrimaryLabel   string `json:"primaryLabel"`
	SecondaryLabel string `json:"secondaryLabel"`
}

type ValidateErrorJSON struct {
	Details map[string]interface{}   `json:"details"`
	Message ValidateErrorJSONMessage `json:"message"`

	AdditionalProperties interface{} `json:"-"`
}
type _ValidateErrorJSON ValidateErrorJSON

func (c *ValidateErrorJSON) UnmarshalJSON(bs []byte) error {
	data := _ValidateErrorJSON{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ValidateErrorJSON(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "details")
	delete(additionalFields, "message")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ValidateErrorJSON) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ValidateErrorJSON(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
